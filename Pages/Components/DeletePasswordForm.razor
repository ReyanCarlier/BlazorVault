@using BlazorVault.Data.Models
@using BlazorVault.Pages.Components
@using BlazorVault.Utils

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Supprimer un compte
        </MudText>
    </TitleContent>
    <DialogContent>
            <MudText>Êtes-vous sûr de vouloir supprimer ce compte ?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Annuler</MudButton>
        <MudButton Color="Color.Error" OnClick="(() => DeletePassword())">Supprimer</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public Password Password { get; set; } = new();
    [Parameter] public User User { get; set; } = new();

    private VaultService VaultService = default!;

    void Cancel()
    {
        MudDialog?.Cancel();
    }

    protected override void OnInitialized()
    {
        var context = VaultServiceFactory.CreateDbContext();
        VaultService = new VaultService(context);
    }

    async void DeletePassword()
    {
        await VaultService.DeletePasswordAsync(Password.Id);
        var parameters = new DialogParameters<EmptyDialog>();
        parameters.Add("Message", "Le compte a bien été supprimé.");
        parameters.Add("Color", Color.Success);
        parameters.Add("OkText", "Ok");
        var dialog = DialogService.Show<EmptyDialog>("Supprimer un compte", parameters);
        var dialogResult = await dialog.Result;
        MudDialog?.Close(DialogResult.Ok(true));
        StateHasChanged();
    }
}