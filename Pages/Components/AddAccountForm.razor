@using BlazorVault.Data.Models
@using BlazorVault.Pages.Components
@using BlazorVault.Utils

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Ajouter un compte
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="password.Alias" Label="Alias" ReadOnly="false" />
        <MudTextField @bind-Value="password.Domain" Label="Site" ReadOnly="false" />
        <MudSelect T="Group" @bind-Value="selectedGroup" Label="Groupe" ReadOnly="false">
            @foreach (var group in userGroups)
            {
                <MudSelectItem Value="group">@group.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField @bind-Value="password.CategoryName" Label="Catégorie" ReadOnly="false" />
        <MudTextField @bind-Value="password.SubcategoryName" Label="Sous-catégorie" ReadOnly="false" />
        <MudTextField @bind-Value="password.Login" Label="Login" ReadOnly="false" />
        <MudTextField @bind-Value="password.Value" Label="Mot de passe" ReadOnly="false" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Autorenew" OnAdornmentClick="RandomPassword" AdornmentAriaLabel="Générer un mot de passe aléatoire" />
        @if (!isMobile)
        {
            <MudTextField Lines="10" @bind-Value="password.Notes" Label="Description" ReadOnly="false" />
        }
        else
        {
            <MudTextField @bind-Value="password.Notes" Label="Description" ReadOnly="false" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Annuler</MudButton>
        <MudButton Color="Color.Success" OnClick="(() => AddPassword())">Ajouter</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private VaultService VaultService = default!;
    private VaultDbContext VaultDbContext = default!;
    public Group selectedGroup = new();
    public List<Group> userGroups = new();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public User User { get; set; } = new();
    [Parameter] public Password password { get; set; } = new();
    [Parameter] public bool isMobile { get; set; } = false;

    public List<Password> userPasswords = new();
    public InputType PasswordInput { get; set; } = InputType.Password;
    public string PasswordInputIcon { get; set; } = Icons.Material.Filled.Visibility;

    void TogglePasswordVisibility()
    {
        if (PasswordInput == InputType.Password)
        {
            PasswordInput = InputType.Text;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            PasswordInput = InputType.Password;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var context = VaultServiceFactory.CreateDbContext();
        VaultService = new VaultService(context);
        userPasswords = await VaultService.GetPasswordsByUserIdAsync(User.Id);
        Group solo = new();
        solo.Id = 0;
        solo.Name = "Personnel";
        selectedGroup = solo;
        var groups = await VaultService.GetGroupsWhereUserIsMemberAsync(User);
        userGroups.Add(solo);
        userGroups.AddRange(groups);
        return;
    }
    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private async void RandomPassword()
    {
        IDialogReference? dial = DialogService.Show<RandomPasswordForm>("Générateur de Mots de passe", new DialogParameters<RandomPasswordForm> { ["isMobile"] = isMobile }, new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });
        await dial.Result;
        StateHasChanged();
    }

    private async Task AddPassword()
    {
        DialogParameters<EmptyDialog>? parameters = new();
        IDialogReference? dialog = null;
        DialogResult? dialogResult = null;
        if (User.MasterPassword == null || User.MasterPassword == "")
        {
            parameters.Add("Message", "Vous devez définir un mot de passe principal avant d'ajouter un compte.");
            parameters.Add("Color", Color.Warning);
            parameters.Add("OkText", "Ok");

            dialog = DialogService.Show<EmptyDialog>("Ajouter un compte", parameters);
            dialogResult = await dialog.Result;
            return;
        }
        if (!Crypto.IsPasswordStrongEnough(password.Value))
        {
            parameters = new();
            parameters.Add("Message", "Le mot de passe doit contenir au moins 12 caractères, dont une majuscule, une minuscule, un chiffre et un caractère spécial.");
            parameters.Add("Color", Color.Warning);
            parameters.Add("OkText", "Ok");

            dialog = DialogService.Show<EmptyDialog>("Ajouter un compte", parameters);
            dialogResult = await dialog.Result;
            return;
        }

        password.CreatedAt = DateTime.Now;
        password.UpdatedAt = DateTime.Now;
        password.UserId = User.Id;
        password.GroupId = selectedGroup.Id;
        bool added = await VaultService.AddPasswordAsync(password, User);
        parameters = new();
        if (added)
        {
            userPasswords.Add(password);
            parameters.Add("Message", "Mot de passe ajouté avec succès.");
            parameters.Add("Color", Color.Success);
        }
        else
        {
            parameters.Add("Message", "Une erreur est survenue lors de l'ajout du mot de passe.");
            parameters.Add("Color", Color.Error);
        }
        parameters.Add("OkText", "Ok");

        dialog = DialogService.Show<EmptyDialog>("Ajouter un compte", parameters);
        dialogResult = await dialog.Result;
        MudDialog?.Close(DialogResult.Ok(password?.Id));
    }
}