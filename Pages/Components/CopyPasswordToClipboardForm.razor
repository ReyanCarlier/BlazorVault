@using Google.Authenticator
@using BlazorVault.Data.Models
@using BlazorVault.Pages.Components
@using BlazorVault.Utils
@inject ClipboardService ClipboardService
@inject IJSRuntime JSRuntime

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Copier un mot de passe
        </MudText>
    </TitleContent>
    <DialogActions>
        @if (!isMobile)
        {
            <MudButton OnClick="Cancel">Annuler</MudButton>
            <MudButton Color="Color.Success" OnClick="((e) => CopyPassword())">Copier</MudButton>
        }
        else
        {
            <MudButton OnClick="Cancel">Annuler</MudButton>
            <button onclick="handleClickAndCopy('@($"{DecypheredPassword}")')">Copier</button>
        }
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public Password Password { get; set; } = new();
    [Parameter] public User User { get; set; } = new();
    [Parameter] public bool isMobile { get; set; } = false;

    public string MasterPassword { get; set; } = "";
    public string DecypheredPassword { get; set; } = "";

    [JSInvokable]
    public async Task OnCopySuccess(string copiedText)
    {
        var parameters = new DialogParameters<EmptyDialog>();
        parameters.Add("Message", "Le mot de passe a bien été copié dans le presse-papier.");
        parameters.Add("Color", Color.Success);
        parameters.Add("OkText", "Ok");
        var dialog = DialogService.Show<EmptyDialog>("Copier un mot de passe", parameters);
        var dialogResult = await dialog.Result;
        MudDialog?.Close(DialogResult.Ok(true));
    }

    [JSInvokable]
    public async Task OnCopyError()
    {
        var parameters = new DialogParameters<EmptyDialog>();
        parameters.Add("Message", "Une erreur est survenue lors de la copie du mot de passe dans le presse-papier.");
        parameters.Add("Color", Color.Error);
        parameters.Add("OkText", "Ok");
        var dialog = DialogService.Show<EmptyDialog>("Copier un mot de passe", parameters);
        var dialogResult = await dialog.Result;
        MudDialog?.Close(DialogResult.Cancel());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isMobile)
        {
            await JSRuntime.InvokeAsync<string>("setBlazorReference", DotNetObjectReference.Create(this));
        }
    }

    void Cancel()
    {
        MudDialog?.Cancel();
    }

    async void VerifyPassword()
    {
        try
        {
            if (User == null || User.MasterPassword == null || User.MasterPassword == "")
            {
                var parameters = new DialogParameters<EmptyDialog>();
                parameters.Add("Message", "Vous devez définir un mot de passe principal avant de pouvoir copier un mot de passe.");
                parameters.Add("Color", Color.Warning);
                parameters.Add("OkText", "Ok");
                var dialog = DialogService.Show<EmptyDialog>("Erreur", parameters);
                var dialogResult = await dialog.Result;
                MudDialog?.Close(DialogResult.Ok(true));
                return;
            }
            DecypheredPassword = Crypto.Decrypt(Password.Value, MasterPassword);
            StateHasChanged();
        }
        catch
        {
            var parameters = new DialogParameters<EmptyDialog>();
            parameters.Add("Message", "Le mot de passe principal est incorrect.");
            parameters.Add("Color", Color.Error);
            parameters.Add("OkText", "Ok");
            var dialog = DialogService.Show<EmptyDialog>("Erreur", parameters);
            var dialogResult = await dialog.Result;
            MudDialog?.Close(DialogResult.Cancel());
            return;
        }
    }

    async void CopyPassword()
    {
        try
        {
            if (User == null || User.MasterPassword == null || User.MasterPassword == "")
            {
                var parameters = new DialogParameters<EmptyDialog>();
                parameters.Add("Message", "Vous devez définir un mot de passe principal avant de pouvoir copier un mot de passe.");
                parameters.Add("Color", Color.Warning);
                parameters.Add("OkText", "Ok");
                var dialog = DialogService.Show<EmptyDialog>("Erreur", parameters);
                var dialogResult = await dialog.Result;
                MudDialog?.Close(DialogResult.Ok(true));
            }
            else
            {
                await ClipboardService.CopyToClipboardAsync(Crypto.Decrypt(Password.Value, Crypto.Decrypt(User.MasterPassword, Program.AdminPassword)));
                var parameters = new DialogParameters<EmptyDialog>();
                parameters.Add("Message", "Le mot de passe a bien été copié dans le presse-papier.");
                parameters.Add("Color", Color.Success);
                parameters.Add("OkText", "Ok");
                var dialog = DialogService.Show<EmptyDialog>("Copier un mot de passe", parameters);
                var dialogResult = await dialog.Result;
                MudDialog?.Close(DialogResult.Ok(true));
            }
        }
        catch
        {
            var parameters = new DialogParameters<EmptyDialog>();
            parameters.Add("Message", "Le mot de passe principal est incorrect.");
            parameters.Add("Color", Color.Error);
            parameters.Add("OkText", "Ok");
            var dialog = DialogService.Show<EmptyDialog>("Erreur", parameters);
            var dialogResult = await dialog.Result;
            MudDialog?.Close(DialogResult.Cancel());
            return;
        }
    }
}