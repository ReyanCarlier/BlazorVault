@* Formulaire de modification du mot de passe principal (MasterPassword) *@

<MudForm>
    @if (User.MasterPassword != null && User.MasterPassword != "")
    {
        <MudItem xs="12" md="12">
            <MudTextField @bind-Value="currentPassword" Label="Mot de passe principal actuel" ReadOnly="false" />
        </MudItem>
    }
    <MudItem xs="12" md="12">
        <MudTextField @bind-Value="newPassword" Label="Nouveau mot de passe principal" ReadOnly="false" />
    </MudItem>
    <MudItem xs="12" md="12">
        <MudTextField @bind-Value="newPasswordConfirmation" Label="Confirmation" ReadOnly="false" />
    </MudItem>
    <MudItem xs="12" md="12">
        @if (User.MasterPassword == null || User.MasterPassword == "")
        {
            <MudButton Color="Color.Success" OnClick="(() => UpdateMasterPassword())">Définir</MudButton>
        }
        else
        {
            <MudButton Color="Color.Success" OnClick="(() => UpdateMasterPassword())">Modifier</MudButton>
        }
    </MudItem>
</MudForm>

@code
{
    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; } = null!;
    private VaultService VaultService = default!;

    public User User { get; set; } = new();

    string currentPassword = "";
    string newPassword = "";
    string newPasswordConfirmation = "";

    protected override async Task OnInitializedAsync()
    {
        var context = VaultServiceFactory.CreateDbContext();
        VaultService = new VaultService(context);
        var authState = await AuthState;
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            var email = user.FindFirst("preferred_username")?.Value;
            if (!string.IsNullOrEmpty(email))
            {
                var userDetails = await VaultService.GetUserAsync(email);
                if (userDetails == null)
                {
                    User user1 = new User
                    {
                        Mail = email,
                        RoleId = 0,
                        MasterPassword = "",
                        CreatedAt = DateTime.Now,
                        UpdatedAt = DateTime.Now
                    };
                    await VaultService.AddUserAsync(user1);
                }
            }
        }
        User = await VaultService.GetUserAsync(user.FindFirst("preferred_username")?.Value);
    }

    private async Task UpdateMasterPassword()
    {
        DialogParameters<EmptyDialog>? parameters = new();
        IDialogReference? dialog = null;
        if (newPassword != newPasswordConfirmation)
        {
            parameters = new();
            parameters.Add("Message", "Les mots de passe ne correspondent pas.");
            parameters.Add("Color", Color.Error);
            parameters.Add("OkText", "Ok");

            dialog = DialogService.Show<EmptyDialog>("Erreur", parameters);

            return;
        }

        if (!Crypto.IsPasswordStrongEnough(newPassword))
        {
            parameters = new();
            parameters.Add("Message", "Le mot de passe doit contenir au moins 12 caractères, dont une majuscule, une minuscule, un chiffre et un caractère spécial.");
            parameters.Add("Color", Color.Error);
            parameters.Add("OkText", "Ok");

            dialog = DialogService.Show<EmptyDialog>("Mot de passe principal trop faible", parameters);

            return;
        }

        try
        {
            if (User.MasterPassword != null && User.MasterPassword != "" && Crypto.Encrypt(currentPassword, Program.AdminPassword) != User.MasterPassword)
            {
                parameters = new();
                parameters.Add("Message", "Le mot de passe actuel est incorrect.");
                parameters.Add("Color", Color.Error);
                parameters.Add("OkText", "Ok");

                dialog = DialogService.Show<EmptyDialog>("Erreur", parameters);

                return;
            }
        }
        catch
        {
            parameters = new();
            parameters.Add("Message", "Le mot de passe actuel est incorrect.");
            parameters.Add("Color", Color.Error);
            parameters.Add("OkText", "Ok");

            dialog = DialogService.Show<EmptyDialog>("Erreur", parameters);

            return;
        }

        bool updated = await VaultService.UpdateMasterPasswordAsync(User, newPassword);

        parameters = new();

        if (updated)
        {
            parameters.Add("Message", "Mot de passe principal modifié avec succès.");
            parameters.Add("Color", Color.Success);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            parameters.Add("Message", "Une erreur est survenue lors de la modification du mot de passe principal.");
            parameters.Add("Color", Color.Error);
        }
        parameters.Add("OkText", "Ok");

        dialog = DialogService.Show<EmptyDialog>("Modification du mot de passe principal", parameters);
    }
}