@using BlazorVault.Data.Models
@using BlazorVault.Pages.Components
@using BlazorVault.Utils

<MudDialog>

    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Modifier un compte
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="password.Domain" Label="Site" ReadOnly="false" />
        <MudTextField @bind-Value="password.CategoryName" Label="Catégorie" ReadOnly="false"/>
        <MudTextField @bind-Value="password.SubcategoryName" Label="Sous-catégorie" ReadOnly="false"/>
        <MudTextField @bind-Value="password.Login" Label="Login" ReadOnly="false" />
        <MudTextField @bind-Value="newPassword" Label="Nouveau mot de passe" ReadOnly="false" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Autorenew" OnAdornmentClick="RandomPassword" AdornmentAriaLabel="Générer un mot de passe aléatoire" />
        <MudTextField Lines="10" @bind-Value="password.Notes" Label="Description" ReadOnly="false" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Annuler</MudButton>
        <MudButton Color="Color.Success" OnClick="(() => EditPassword())">Enregistrer</MudButton>
    </DialogActions>

</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public User User { get; set; } = new();
    [Parameter] public Password password { get; set; } = new();
    [Parameter] public bool isMobile { get; set; } = false;

    private VaultService VaultService = default!;

    string newPassword = "";
    string masterPassword = "";

    public List<Password> userPasswords = new();

    protected override async Task OnInitializedAsync()
    {
        var context = VaultServiceFactory.CreateDbContext();
        VaultService = new VaultService(context);
        userPasswords = await VaultService.GetPasswordsByUserIdAsync(User.Id);
        return;
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private async void RandomPassword()
    {
        IDialogReference? dial = DialogService.Show<RandomPasswordForm>("Générateur de Mots de passe", new DialogParameters<RandomPasswordForm> { ["isMobile"] = isMobile });
        await dial.Result;
        StateHasChanged();
    }

    public async Task EditPassword()
    {
        DialogParameters<EmptyDialog>? parameters = new();
        IDialogReference? dialog = null;
        DialogResult? dialogResult = null;
        if (password.Alias == "" || password.Domain == "" || password.Login == "" || password.CategoryName == "" || password.SubcategoryName == "")
        {
            parameters.Add("Message", "Vous devez remplir tous les champs à part la description et le nouveau mot de passe.");
            parameters.Add("Color", Color.Warning);
            parameters.Add("OkText", "Ok");

            dialog = DialogService.Show<EmptyDialog>("Modifier un compte", parameters);
            dialogResult = await dialog.Result;
            return;
        }

        if (User.MasterPassword == null || User.MasterPassword == "")
        {
            parameters.Add("Message", "Vous devez définir un mot de passe principal avant de modifier un compte.");
            parameters.Add("Color", Color.Warning);
            parameters.Add("OkText", "Ok");

            dialog = DialogService.Show<EmptyDialog>("Modifier un compte", parameters);
            dialogResult = await dialog.Result;
            return;
        }

        if (newPassword != null && newPassword != "")
        {
            if (!Crypto.IsPasswordStrongEnough(newPassword))
            {
                parameters = new();
                parameters.Add("Message", "Le mot de passe doit contenir au moins 12 caractères, dont une majuscule, une minuscule, un chiffre et un caractère spécial.");
                parameters.Add("Color", Color.Warning);
                parameters.Add("OkText", "Ok");

                dialog = DialogService.Show<EmptyDialog>("Modifier un compte", parameters);
                dialogResult = await dialog.Result;
                return;
            }
            if (password.GroupId == 0)
                password.Value = Crypto.Encrypt(newPassword, User.MasterPassword);
            else
            {
                var group = await VaultService.GetGroupAsync(password.GroupId);
                if (group == null)
                {
                    parameters = new();
                    parameters.Add("Message", "Une erreur est survenue lors de la modification du compte.");
                    parameters.Add("Color", Color.Error);
                    parameters.Add("OkText", "Ok");

                    dialog = DialogService.Show<EmptyDialog>("Modifier un compte", parameters);
                    dialogResult = await dialog.Result;
                    return;
                }
                password.Value = Crypto.Encrypt(newPassword, Crypto.Decrypt(group.CypheredPassword, Program.AdminPassword));
            }
        }
        
        parameters = new();
        if (await VaultService.UpdatePasswordAsync(password))
        {
            parameters.Add("Message", "Compte modifié avec succès.");
            parameters.Add("Color", Color.Success);
        }
        else
        {
            parameters.Add("Message", "Une erreur est survenue lors de la modification du compte.");
            parameters.Add("Color", Color.Error);
        }
        MudDialog?.Close(DialogResult.Ok(true));
    }
}