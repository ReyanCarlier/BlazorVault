@inject ClipboardService ClipboardService
@inject ISnackbar SnackBar
@inject IJSRuntime JSRuntime2

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Générer un mot de passe
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm>
            <MudGrid>
                <MudItem xs="12" md="12">
                    <MudTextField Label="Longueur" @bind-Value="length" ReadOnly="true" />
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudSlider @bind-Value="length" Min="12" Max="255" Step="1"/>
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudTextField Label="Mot de passe" @bind-Value="password" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AutoMode" OnAdornmentClick="GeneratePassword" AdornmentAriaLabel="Générer un mot de passe aléatoire" />
                </MudItem>
                <MudItem xs="6" md="6" lg="6">
                    @if (!isMobile)
                    {
                        <MudButton Color="Color.Success" OnClick="CopyToClipboard">Copier</MudButton>
                    }
                    else
                    {
                        <button onclick="handleClickAndCopy('@($"{password}")')">Copier</button>
                    }
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public bool isMobile { get; set; } = false;

    public int length = 12;
    public string password = "";

    [JSInvokable]
    public async Task OnCopySuccess(string copiedText)
    {
        var parameters = new DialogParameters<EmptyDialog>();
        parameters.Add("Message", "Le mot de passe a bien été copié dans le presse-papier.");
        parameters.Add("Color", Color.Success);
        parameters.Add("OkText", "Ok");
        var dialog = DialogService.Show<EmptyDialog>("Copier un mot de passe", parameters);
        var dialogResult = await dialog.Result;
        MudDialog?.Close(DialogResult.Ok(true));
    }

    [JSInvokable]
    public async Task OnCopyError()
    {
        var parameters = new DialogParameters<EmptyDialog>();
        parameters.Add("Message", "Une erreur est survenue lors de la copie du mot de passe dans le presse-papier.");
        parameters.Add("Color", Color.Error);
        parameters.Add("OkText", "Ok");
        var dialog = DialogService.Show<EmptyDialog>("Copier un mot de passe", parameters);
        var dialogResult = await dialog.Result;
        MudDialog?.Close(DialogResult.Cancel());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isMobile)
        {
            await JSRuntime2.InvokeAsync<string>("setBlazorReference", DotNetObjectReference.Create(this));
        }
    }

    private void GeneratePassword()
    {
        password = Crypto.RandomPasswordGenerator(length);
        StateHasChanged();
    }

    private async void CopyToClipboard()
    {
        if (length < 12)
        {
            SnackBar.Add("La longueur du mot de passe doit être supérieure ou égale à 12.", Severity.Error);
            return;
        }
        else if (length > 255)
        {
            SnackBar.Add("La longueur du mot de passe doit être inférieure ou égale à 255.", Severity.Error);
            return;
        }
        try
        {
            await ClipboardService.CopyToClipboardAsync(password);
        }
        catch (Exception ex)
        {
            SnackBar.Add(ex.Message, Severity.Error);
            return;
        }
        SnackBar.Add("Mot de passe copié dans le presse-papier.", Severity.Success);
        MudDialog?.Close(DialogResult.Ok(true));
    }
}
